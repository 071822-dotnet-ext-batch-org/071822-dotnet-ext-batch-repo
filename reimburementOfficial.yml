# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

# trigger:
# - main

# this pipeline will only trigger when any change on the 
# path demos/reimbursementApi in main branch occurs
pr: none
trigger:
  branches:
    include:
    - main
  paths:
    include:
    - demos/ReimbursementApi

pool:
  vmImage: 'windows-latest'

# DRY! - any value you use more than once should be a variable
# the path is a relative path from the .yaml file
variables:
  solution: 'demos/ReimbursementApi/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  workingDirectory: demos/ReimbursementApi

stages:
- stage: prep
  jobs:
  - job: sdk_and_nuget_download # can't have a space here?????
    displayName: download the most current SDK 
    steps:
    - task: UseDotNet@2
      displayName: get the sdk
      inputs:
        packageType: 'sdk'
        version: '6.x'    
    - task: NuGetToolInstaller@1
      inputs:
        versionSpec: 
        checkLatest: true
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: '071822batch_SonarCloudServiceConnection'
        organization: '071822dotnetbatch'
        scannerMode: 'MSBuild'
        projectKey: '071822dotnetbatch_071822batchtest'
        projectName: '071822batchtest'

# this is the build stage        
- stage: build
  dependsOn: prep
  jobs:
  - job: job1
    steps:
    - task: NuGetCommand@2
      displayName: restore_the_app
      inputs:
        command: 'restore'
        restoreSolution: '$(solution)'
    - task: DotNetCoreCLI@2
      displayName: build_the_app
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration)'
        workingDirectory: '$(workingDirectory)'

#testing tasks go there
- stage: test
  dependsOn: build
  jobs:
  - job: test_the_app
    steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'
        testRunTitle: 'Dotnet testing in progress'
        workingDirectory: '$(workingDirectory)'
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '**/coburtura/coverage.xml'
        # failIfCoverageEmpty: true
    - task: SonarCloudAnalyze@1

#publish the app
- stage: publish
  dependsOn: test
  jobs:
  - job: publish_the_app
    steps:
    # publishing is optional but allows you to decorate the PRs later.
    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'
    - task: DotNetCoreCLI@2
      displayName: publishing_task
      inputs:
        command: 'publish'
        publishWebProjects: true
        workingDirectory: '$(workingDirectory)'
        projects: $(solution)
        zipAfterPublish: true

# - stage: deploy
#   jobs:
#   - job: deploy_the_app
#     steps:
#     - task: AzureRmWebAppDeployment@4
#       inputs:
#         ConnectionType: 'AzureRM'
#         appType: 'webApp'
#         WebAppName: 'placeholder'
#         deployToSlotOrASE: true
#         ResourceGroupName: 'placeholder'
#         SlotName: 'production'
#         packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'


